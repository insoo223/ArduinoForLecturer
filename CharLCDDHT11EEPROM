//Sample using LiquidCrystal library
#include <LiquidCrystal.h>
#include <EEPROM.h>
#include <DHT.h>

#define dht_dpin 2 //no ; here. Set equal to channel sensor is on

dht DHT;

/*******************************************************

This program will test the LCD panel and the buttons
Mark Bramwell, July 2010

********************************************************/

// select the pins used on the LCD panel
LiquidCrystal lcd(8, 9, 4, 5, 6, 7);

// define some values used by the panel and buttons
int lcd_key     = 0;
int adc_key_in  = 0;
int BackLightState;

// the current address in the EEPROM
int addr = 0; 
int valHumidity, valTemp;
long valTimeLapse;

#define btnRIGHT  0
#define btnUP     1
#define btnDOWN   2
#define btnLEFT   3
#define btnSELECT 4
#define btnNONE   5
#define BackLightPin   10

void setup()
{
 lcd.begin(16, 2);              // start the library
 lcd.setCursor(0,0);
 //lcd.print("Push the buttons"); // print a simple message
 // To check buttons' ADC value
 Serial.begin (9600);
 
}
 
void loop()
{
 DHT.read11(dht_dpin);

 lcd.setCursor(0,0);            // move to the begining of the 1st line
 lcd.print("Humidity: ");
 valHumidity = round(DHT.humidity);
 lcd.print(valHumidity);
 lcd.print("%");

 lcd.setCursor(0,1);            // move to the begining of the second line
 lcd.print("Temp: ");
 valTemp = round(DHT.temperature);
 lcd.print(round(DHT.temperature));
 lcd.print((char)223);
 lcd.print("C");
 valTimeLapse = millis()/1000;
 lcd.print(valTimeLapse);
 
 EEPROM.write(addr, valTimeLapse);
 addr = addr + 1;
 if (addr == 512)
   addr = 0;
 EEPROM.write(addr, valTemp);
 addr = addr + 1;
 if (addr == 512)
   addr = 0;
 EEPROM.write(addr, valHumidity);   
 addr = addr + 1;
 if (addr == 512)
   addr = 0;
 
 // advance to the next address.  there are 512 bytes in
 // the EEPROM, so go back to 0 when we hit 512.

 Serial.print("Humidity: ");
 Serial.println(round(DHT.humidity));
 Serial.print("Temp: ");
 Serial.println(round(DHT.temperature));
 delay(360000); // 10 min
 /*
 lcd.setCursor(9,1);            // move cursor to second line "1" and 9 spaces over
 lcd.print(millis()/1000);      // display seconds elapsed since power-up


 lcd.setCursor(0,1);            // move to the begining of the second line
 lcd_key = read_LCD_buttons();  // read the buttons

 switch (lcd_key)               // depending on which button was pushed, we perform an action
 {
   case btnRIGHT:
     {
     lcd.print("RIGHT ");
     break;
     }
   case btnLEFT:
     {
     lcd.print("LEFT   ");
     break;
     }
   case btnUP:
     {
     lcd.print("UP    ");
     break;
     }
   case btnDOWN:
     {
     lcd.print("DOWN  ");
     break;
     }
   case btnSELECT:
     {
     lcd.print("SELECT");
     break;
     }
     case btnNONE:
     {
     lcd.print("NONE  ");
     break;
     }
 } // switch
 delay(500);
 */
 

} // loop

// read the buttons
int read_LCD_buttons()
{
 adc_key_in = analogRead(0);      // read the value from the sensor 
 // To check buttons' ADC value
 Serial.print("Button ADC: ");
 Serial.println(adc_key_in);

 BackLightState = digitalRead(BackLightPin);
 Serial.print("BackLight Status: ");
 Serial.println(BackLightState);
 // my buttons when read are centered at these values: 0, 144, 329, 504, 741
 // Insoo's buttons are: 0, 100, 258, 412, 640
 // we add approx 50 to those values and check to see if we are close
 if (adc_key_in > 1000) return btnNONE; // We make this the 1st option for speed reasons since it will be the most likely result
 // For V1.1 us this threshold
 if (adc_key_in < 50)   return btnRIGHT;  
 /*-- original threshold values
 if (adc_key_in < 250)  return btnUP; 
 if (adc_key_in < 450)  return btnDOWN; 
 if (adc_key_in < 650)  return btnLEFT; 
 if (adc_key_in < 850)  return btnSELECT;  
 */
 if (adc_key_in < 200)  return btnUP; 
 if (adc_key_in < 300)  return btnDOWN; 
 if (adc_key_in < 500)  return btnLEFT; 
 if (adc_key_in < 700)  return btnSELECT;  

 // For V1.0 comment the other threshold and use the one below:
/*
 if (adc_key_in < 50)   return btnRIGHT;  
 if (adc_key_in < 195)  return btnUP; 
 if (adc_key_in < 380)  return btnDOWN; 
 if (adc_key_in < 555)  return btnLEFT; 
 if (adc_key_in < 790)  return btnSELECT;   
*/

 return btnNONE;  // when all others fail, return this...
 
} // read_LCD_buttons
